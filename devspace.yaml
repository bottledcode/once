version: v2beta1
name: once

vars:
  STATE_SECRET: not-a-secret
  IMAGE: 'registry.bottled.codes/swytch/once'
  RETHINKDB_HOST: rethinkdb-main-rethinkdb-proxy.main.svc.cluster.local
  RETHINKDB_USER: swytch-once
  RETHINKDB_PASSWORD: not-a-secret
  RETHINKDB_DB: swytch-once
  AUTH_HOST: auth.getswytch.com
  REPLICAS: 2
  HOST: once.getswytch.com

dependencies:
  swytch-auth:
    namespace: swytch-auth
    branch: main-v2
    git: https://github.com/bottledcode/swytch-auth.git
    vars:
      POSTMARK_API_KEY: ${{ secrets.POSTMARK_SANDBOX_API_KEY }}
      OP_MODE: preview
      HOSTS: '["${AUTH_HOST}"]'

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      ensure_pull_secrets --all    # 2. Ensure pull secrets
      create_deployments --all     # 3. Deploy Helm charts and manifests specfied as "deployments"
      start_dev once                # 4. Start dev mode "app" (see "dev" section)
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      loft wakeup space image-builder
      kubectl create namespace swytch-auth
      run_dependencies --all --pipeline deploy
      run_dependencies --all --pipeline db-migrate
      ensure_pull_secrets --all
      build_images --all
      devspace reset pods
      create_deployments --all
  build:
    run: |-
      loft wakeup space image-builder
      run_dependencies --all --pipeline build
      build_images --all
  db-migrate:
    run: |-
      echo "Migrating database: waiting for pod to be ready..."
      wait_pod --image-selector=registry.bottled.codes/swytch/once
      echo "Migrating database: running migrations..."
      exec_container --image-selector=registry.bottled.codes/swytch/once php src/scripts/db.php $RETHINKDB_ADMIN_PASSWORD

# This is a list of `images` that DevSpace can build for this project
# We recommend to skip image building during development (devspace dev) as much as possible
images:
  once:
    image: registry.bottled.codes/swytch/once
    dockerfile: ./Dockerfile
    target: prod
    buildKit:
      inCluster:
        noLoad: true
        name: builder
        namespace: image-builder

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  once:
    updateImageTags: true
    name: swytch-once
    # This deployment uses `helm` but you can also define `kubectl` deployments or kustomizations
    helm:
      # We are deploying this project with the Helm chart you provided
      chart:
        path: charts/deployment
      # Under `values` we can define the values for this Helm chart used during `helm install/upgrade`
      # You may also use `valuesFiles` to load values from files, e.g. valuesFiles: ["values.yaml"]
      values:
        replicaCount: $REPLICAS
        image: ${IMAGE}
        host: ${HOST}
        auth:
          signinUrl: https://${AUTH_HOST}/login
        secrets:
          stateSecret: ${STATE_SECRET}
        rethinkdb:
          host: ${RETHINKDB_HOST}
          db: ${RETHINKDB_DB}
          user: ${RETHINKDB_USER}
          password: ${RETHINKDB_PASSWORD}
      disableDependencyUpdate: false

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  once:
    # Search for the container that runs this image
    imageSelector: registry.bottled.codes/swytch/once
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    devImage: registry.bottled.codes/swytch/once
    # Sync files between the local filesystem and the development container
    sync:
      - path: ./
    # Open a terminal and use the following command to start it
    terminal:
      command: ./devspace_start.sh
    reversePorts:
      - bindAddress: '9003'
        port: '9003'
      # Make the following commands from my local machine available inside the dev container
    proxyCommands:
      - command: devspace
      - command: kubectl
      - command: helm
      - gitCredentials: true
      - command: composer
      - command: git

# Use the `commands` section to define repeatable dev workflows for this project 
commands:
  clean:
    command: |-
      rm -rf vendor
      rm -rf html/assets/compiled.css

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)
